{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Arturo",
	"patterns": [
		{
			"include": "#shebang"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#builtins1"
		},
		{
			"include": "#builtins2"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#code_css"
		},
		{
			"include": "#code_html"
		},
		{
			"include": "#code_md"
		},
		{
			"include": "#code_sql"
		},
		{
			"include": "#code_sh"
		},
		{
			"include": "#curly_string"
		},
		{
			"include": "#string_block"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#sugar"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#types"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#labels"
		}
	],
	"repository": {
		"shebang": {
			"name": "comment.line.shebang.art",
			"match": "\\A(#!).*(?=$)",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.art"
				}
			}
		},
		"comments": {
			"name": "comment.line.art",
			"begin": ";",
			"end": "$"
		},
		"builtins1": {
			"patterns": [{
				"name": "support.constant.art",
				"match": "(?<!')\\b(all|and|any|ascii|attr|attribute|attributeLabel|binary|block|boolean|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|set|some|standalone|string|subset|suffix|superset|symbol|true|try|type|upper|when|whitespace|word|xnor|zero)\\?(?!:)"
			}]
		},
		"builtins2": {
			"patterns": [{
				"name": "support.constant.art",
				"match": "(?<!')\\b(abs|acos|acosh|add|and|append|arg|arity|array|as|asin|asinh|atan|atanh|attr|attrs|average|benchmark|break|builtins1|builtins2|call|capitalize|case|ceil|chop|clear|close|color|combine|continue|cos|cosh|csec|csech|ctan|ctanh|cursor|dec|decode|define|dictionary|difference|digest|div|do|download|drop|dup|else|empty|encode|ensure|env|epsilon|execute|exit|exp|extend|extract|factors|false|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|globalize|goto|hash|help|if|inc|index|info|input|insert|inspect|intersection|join|keys|last|let|levenshtein|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|not|now|null|open|or|pad|panic|path|pause|permutate|pi|pop|pow|prefix|print|prints|product|query|random|range|read|relative|remove|render|repeat|replace|return|reverse|round|sample|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|slice|sort|split|sqrt|squeeze|stack|strip|sub|suffix|sum|symbols|sys|take|tan|tanh|terminal|to|true|truncate|try|type|union|unique|until|unzip|upper|values|var|webview|while|with|write|xnor|xor|zip)\\b(?!:)"
			}]
		},
		"chars": {
			"patterns": [{
				"name": "string.quoted.double.art",
				"match": "`.`"
			}]
		},
		"strings": {
			"name": "string.quoted.double.art",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.art",
					"match": "\\\\."
				}
			]
		},
		"code_css": {
            "begin": "\\{!css",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.css",
            "patterns": [ { "include": "source.css" } ]
		},
		"code_html": {
            "begin": "\\{!html",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.html",
            "patterns": [ { "include": "text.html.derivative" } ]
		},
		"code_md": {
            "begin": "\\{!md",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.markdown",
            "patterns": [ { "include": "text.html.markdown" } ]
		},
		"code_sql": {
            "begin": "\\{!sql",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.html",
            "patterns": [ { "include": "source.sql" } ]
		},
		"code_sh": {
            "begin": "\\{!sh",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.shell",
            "patterns": [ { "include": "source.shell" } ]
		},
		"curly_string": {
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "text.plain.art"
		},
		"string_block": {
            "begin": "---",
            "end": "---",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "string.quoted.double.art"
		},
		"constants": {
			"patterns": [{
				"name": "constant.language.art",
				"match": "(true|false|null)(?!\\?)"
			}]
		},
		"sugar": {
			"patterns": [{
				"name": "meta.attribute.id.html string",
				"match": "(->|=>|\\||\\:\\:)"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.art",
				"match": "<\\:|\\-\\:|Ã¸|@|#|\\+|\\||\\*|\\$|\\-|\\%|\\/|\\.\\.|\\^|~|=|<|>|\\\\|\\-\\-\\-"
			}]
		},
		"literals": {
			"patterns": [{
				"name": "constant.language.art",
				"match": "'([\\w]+\\b\\??:?)"
			}]
		},
		"types": {
			"patterns": [{
				"name": "constant.language.art",
				"match": ":([\\w]+)"
			}]
		},
		"attributes": {
			"patterns": [{
				"name": "text.plain.art",
				"match": "\\.([\\w]+\\b\\??:?)"
			}]
		},
		"labels": {
			"patterns": [{
				"name": "entity.name.art",
				"match": "([\\w]+\\b\\??:)"
			}]
		}
	},
	"scopeName": "source.arturo"
}