{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Arturo",
	"patterns": [
		{
			"include": "#shebang"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#builtins1"
		},
		{
			"include": "#builtins2"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#safe_strings"
		},
		{
			"include": "#smart_strings"
		},
		{
			"include": "#code_css"
		},
		{
			"include": "#code_html"
		},
		{
			"include": "#code_md"
		},
		{
			"include": "#code_js"
		},
		{
			"include": "#code_sql"
		},
		{
			"include": "#code_sh"
		},
		{
			"include": "#curly_regex"
		},
		{
			"include": "#curly_string"
		},
		{
			"include": "#string_block"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#sugar"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#types"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#labels"
		}
	],
	"repository": {
		"shebang": {
			"name": "comment.line.shebang.art",
			"match": "\\A(#!).*(?=$)",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.art"
				}
			}
		},
		"comments": {
			"name": "comment.line.art",
			"begin": ";",
			"end": "$"
		},
		"builtins1": {
			"patterns": [{
				"name": "support.constant.art",
				"match": "(?<!')\\b(absolute|all|and|any|ascii|attr|attribute|attributeLabel|between|binary|block|bytecode|char|color|complex|contains|database|date|dictionary|disjoint|empty|equal|even|every|exists|false|floating|friday|function|greater|greaterOrEqual|hidden|if|in|infinite|inline|integer|intersect|is|key|label|leap|less|lessOrEqual|literal|logical|lower|match|monday|nand|negative|nor|not|notEqual|null|numeric|object|odd|one|or|path|pathLabel|positive|prefix|prime|quantity|range|rational|regex|same|saturday|send|set|some|sorted|standalone|string|subset|suffix|sunday|superset|superuser|symbol|symbolLiteral|thursday|true|try|tuesday|type|unless|upper|version|wednesday|when|whitespace|word|xnor|xor|zero)\\?(?!:)"
			}]
		},
		"builtins2": {
			"patterns": [{
				"name": "support.constant.art",
				"match": "(?<!')\\b(abs|accept|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|alphabet|and|angle|append|arg|args|arity|arrange|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|browse|builtins1|builtins2|call|capitalize|case|ceil|chop|chunk|clamp|clear|clip|close|cluster|coalesce|collect|color|combine|compare|config|conj|connect|continue|copy|cos|cosh|couple|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|decouple|define|delete|denominator|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|divmod|do|download|drop|dup|else|empty|encode|ensure|enumerate|env|epsilon|escape|execute|exit|exp|extend|extract|factorial|factors|false|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gather|gcd|get|goto|grayscale|hash|hypot|if|in|inc|indent|index|infinite|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|lcm|let|levenshtein|lighten|list|listen|ln|log|loop|lower|mail|map|match|max|maximum|maybe|median|min|minimum|mod|module|move|mul|nand|neg|new|nor|normalize|not|now|null|numerator|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prepend|print|prints|process|product|query|random|range|read|receive|reciprocal|relative|remove|rename|render|repeat|replace|request|return|reverse|rotate|round|sample|saturate|script|sec|sech|select|send|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|store|strip|sub|sum|switch|symbols|symlink|sys|take|tally|tan|tanh|terminal|terminate|timestamp|to|translate|true|truncate|try|type|unclip|union|unique|unless|unplug|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\\b(?!:)"
			}]
		},
		"chars": {
			"patterns": [{
				"name": "string.quoted.double.art",
				"match": "`.`"
			}]
		},
		"strings": {
			"name": "string.quoted.double.art",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.art",
					"match": "\\\\."
				}
			]
		},
		"safe_strings": {
			"name": "string.quoted.double.art",
			"begin": "««",
			"end": "»»"
		},
		"smart_strings": {
			"begin": "(«)",
			"beginCaptures": {
                "0": { "name": "meta.attribute.id.html string" }
            },
			"patterns": [
				{
					"name": "markup.bold",
					"match": "."
				}
			],
			"end": "$"
		},
		"code_css": {
            "begin": "\\{!css:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.css",
            "patterns": [ { "include": "source.css" } ]
		},
		"code_html": {
            "begin": "\\{!html:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.html",
            "patterns": [ { "include": "text.html.derivative" } ]
		},
		"code_md": {
            "begin": "\\{!md:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.markdown",
            "patterns": [ { "include": "text.html.markdown" } ]
		},
		"code_js": {
            "begin": "\\{!js:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.js",
            "patterns": [ { "include": "source.js" } ]
		},
		"code_sql": {
            "begin": "\\{!sql:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.html",
            "patterns": [ { "include": "source.sql" } ]
		},
		"code_sh": {
            "begin": "\\{!sh:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "meta.embedded.block.shell",
            "patterns": [ { "include": "source.shell" } ]
		},
		"curly_regex": {
            "begin": "\\{/",
            "end": "/\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "string.regex.art"
		},
		"curly_string": {
            "begin": "\\{:?",
            "end": ":?\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.code.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.code.close" }
            },
            "name": "text.plain.art"
		},
		"string_block": {
            "begin": "(\\-{3,})",
            "beginCaptures": {
                "0": { "name": "meta.attribute.id.html string" }
            },
            "name": "text.plain.art"
		},
		"constants": {
			"patterns": [{
				"name": "constant.language.art",
				"match": "(true|false|null)(?!\\?)"
			}]
		},
		"sugar": {
			"patterns": [{
				"name": "meta.attribute.id.html string",
				"match": "(->|=>|\\||\\:\\:|[\\-]{3,})"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.art",
				"match": "<\\:|\\-\\:|ø|∞|@|#|\\+|<=>|=>>|<->|-->|<-->|==>|<==>|<\\||\\|\\-|\\|=|\\||\\*|\\$|\\-|\\%|\\/|[\\.]{2,}|&|_|!|!!|<:|>:|\\./|\\^|~|=|<|>|\\\\|(?<!\\w)\\?"
			}]
		},
		"literals": {
			"patterns": [{
				"name": "constant.language.art",
				"match": "'([\\w]+\\b\\??:?)"
			}]
		},
		"types": {
			"patterns": [{
				"name": "constant.language.art",
				"match": ":([\\w]+)"
			}]
		},
		"attributes": {
			"patterns": [{
				"name": "text.plain.art",
				"match": "\\.([\\w]+\\b\\??:?)"
			}]
		},
		"labels": {
			"patterns": [{
				"name": "entity.name.art",
				"match": "([\\w]+\\b\\??:)"
			}]
		}
	},
	"scopeName": "source.arturo"
}